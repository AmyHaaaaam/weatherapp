{"version":3,"sources":["App.js"],"names":["SCREEN_WIDTH","Dimensions","get","width","icons","Clouds","Rain","Clear","Atmosphere","Snow","Drizzle","Thunderstorm","App","useState","city","setCity","days","setDays","setOk","useEffect","a","async","Location","granted","accuracy","coords","latitude","longitude","useGoogleMaps","location","fetch","response","json","daily","ask","style","styles","container","cityName","horizontal","pagingEnabled","showsHorizontalScrollIndicator","contentContainerStyle","weather","length","day","color","marginTop","size","map","index","weatherBox","temp","parseFloat","max","toFixed","name","main","tempMin","min","StyleSheet","create","flex","backgroundColor","justifyContent","alignItems","fontSize","fontWeight","display","marginBottom","desc","tinyText"],"mappings":"iPAMcA,EAAiBC,IAAWC,IAAI,UAAtCC,MAGFC,EAAQ,CACZC,OAAQ,iBACRC,KAAM,gBACNC,MAAO,gBACPC,WAAY,cACZC,KAAM,gBACNC,QAAS,uBACTC,aAAc,2BAID,SAASC,IACtB,MAAwBC,mBAAS,aAAjC,WAAOC,EAAP,KAAaC,EAAb,KAEA,EAAwBF,mBAAS,IAAjC,WAAOG,EAAP,KAAaC,EAAb,KACA,EAAoBJ,oBAAS,GAA7B,WAAWK,GAAX,WAqBA,OAJAC,qBAAU,YAhBE,iCAAAC,EAAAC,OAAA,kEAAAD,EAAA,MACcE,OADd,yBACHC,SAELL,GAAM,GAHE,WAAAE,EAAA,MAMoCE,IAAiC,CAACE,SAAS,KAN/E,2BAMHC,OAASC,EANN,EAMMA,SAAUC,EANhB,EAMgBA,UANhB,YAAAP,EAAA,MAQaE,IAA6B,CAACI,WAAUC,aAAY,CAACC,eAAe,KARjF,eAQJC,EARI,OAUVd,EAAQc,EAAS,GAAGf,MAVV,YAAAM,EAAA,MAWaU,MAAM,uDAAuDJ,EAAxD,QAAwEC,EAAvE,wEAXnB,eAWJI,EAXI,mBAAAX,EAAA,MAYSW,EAASC,QAZlB,QAYJA,EAZI,OAaVf,EAAQe,EAAKC,OAbH,6DAiBVC,KACC,IAGD,eAAC,IAAD,CAAMC,MAAOC,EAAOC,UAApB,UACE,cAAC,IAAD,CAAWF,MAAM,UACjB,cAAC,IAAD,CAAMA,MAAOC,EAAOtB,KAApB,SACE,cAAC,IAAD,CAAMqB,MAAOC,EAAOE,SAApB,SAA+BxB,MAEjC,cAAC,IAAD,CACAyB,YAAU,EACVC,eAAa,EAEbC,+BAA+B,QAC/BC,sBAAuBN,EAAOO,QAL9B,SAMmB,IAAhB3B,EAAK4B,OACN,cAAC,IAAD,CAAMT,MAAOC,EAAOS,IAApB,SACE,cAAC,IAAD,CAAmBC,MAAM,QAAQX,MAAO,CAACY,UAAU,IAAKC,KAAK,YAG7DhC,EAAKiC,KAAI,SAACJ,EAAKK,GAAN,OACP,cAAC,IAAD,CAAkBf,MAAOC,EAAOS,IAAhC,SACE,eAAC,IAAD,CAAMV,MAAOC,EAAOe,WAApB,UACE,cAAC,IAAD,CAAMhB,MAAOC,EAAOgB,KAApB,SAA2BC,WAAWR,EAAIO,KAAKE,KAAKC,QAAQ,KAC5D,cAAC,IAAD,CAAwBC,KAAMpD,EAAMyC,EAAIF,QAAQ,GAAGc,MAAOT,KAAM,GAAIF,MAAM,UAC1E,eAAC,IAAD,CAAMX,MAAOC,EAAOsB,QAApB,iBAAkCL,WAAWR,EAAIO,KAAKO,KAAKJ,QAAQ,UAJ5DL,WAevB,IAAMd,EAASwB,IAAWC,OAAO,CAC/BxB,UAAW,CACTyB,KAAM,EACNC,gBAAiB,WAEnBjD,KAAM,CACJgD,KAAM,EACNE,eAAgB,SAChBC,WAAY,UAEd3B,SAAU,CACR4B,SAAU,GACVpB,MAAO,OACPqB,WAAY,OAEdhB,WAAY,CACViB,QAAS,OACTH,WAAY,UAEdpB,IAAK,CACH1C,MAAOH,EACPiE,WAAY,UAEdb,KAAM,CACJL,UAAW,GACXmB,SAAU,GACVpB,MAAO,QAETY,QAAS,CACPX,UAAW,GACXsB,aAAc,GACdH,SAAU,GACVpB,MAAO,QAETwB,KAAM,CACJvB,UAAW,GACXmB,SAAU,IAEZK,SAAU,CACRL,SAAU,GACVpB,MAAO,W","file":"static/js/app.b1f41005.chunk.js","sourcesContent":["import * as Location from 'expo-location';\nimport { StatusBar } from 'expo-status-bar';\nimport React, { useState, useEffect } from \"react\";\nimport { ActivityIndicator, StyleSheet, Text, View, ScrollView, Dimensions } from 'react-native';\nimport { MaterialCommunityIcons } from '@expo/vector-icons'; \n\nconst { width:SCREEN_WIDTH } = Dimensions.get('window');\nconst API_KEY = \"5e59dd9400246d79ba7682638520b651\";\n\nconst icons = {\n  Clouds: \"weather-cloudy\",\n  Rain: \"weather-rainy\",\n  Clear: \"weather-sunny\",\n  Atmosphere: \"weather-fog\",\n  Snow: \"weather-snowy\",\n  Drizzle: \"weather-partly-rainy\",\n  Thunderstorm: \"weather-lightning-rainy\",\n\n}\n\nexport default function App() {\n  const [city, setCity] = useState(\"Loading..\");\n  //const [location, setLocation] = useState();\n  const [days, setDays] = useState([]);\n  const [ok, setOk] = useState(true);\n  const ask = async() => {\n    const {granted} = await Location.requestForegroundPermissionsAsync();\n    if (!granted) { //위치 정보 이용 허가받지 못했을 때\n      setOk(false);\n    }\n\n    const {coords: {latitude, longitude}} = await Location.getCurrentPositionAsync({accuracy:5});\n    \n    const location = await Location.reverseGeocodeAsync({latitude, longitude}, {useGoogleMaps: false});\n\n    setCity(location[0].city);\n    const response = await fetch(`https://api.openweathermap.org/data/2.5/onecall?lat=${latitude}&lon=${longitude}&exclude=alerts&appid=${API_KEY}&units=metric`);\n    const json = await response.json();\n    setDays(json.daily);\n  };\n\n  useEffect(() => {\n    ask();\n  }, []);\n\n  return (\n    <View style={styles.container}>\n      <StatusBar style=\"light\" />\n      <View style={styles.city}>\n        <Text style={styles.cityName}>{city}</Text>\n      </View>\n      <ScrollView \n      horizontal \n      pagingEnabled \n      //indicatorStyle=\"blue\"\n      showsHorizontalScrollIndicator=\"false\"\n      contentContainerStyle={styles.weather}>\n        {days.length === 0 ? (\n        <View style={styles.day}>\n          <ActivityIndicator color=\"white\" style={{marginTop:10}} size=\"large\" />\n        </View>\n        ) : (\n          days.map((day, index) => \n            <View key={index} style={styles.day}>\n              <View style={styles.weatherBox}>\n                <Text style={styles.temp}>{parseFloat(day.temp.max).toFixed(1)}</Text>\n                <MaterialCommunityIcons name={icons[day.weather[0].main]} size={45} color=\"white\" />\n                <Text style={styles.tempMin}>min {parseFloat(day.temp.min).toFixed(1)}</Text>\n              </View>            \n            </View>\n          )\n        )}      \n      </ScrollView>\n    </View>\n  );\n}\n\n\nconst styles = StyleSheet.create({\n  container: {\n    flex: 1, \n    backgroundColor: \"#389ef8\"\n  },\n  city: {\n    flex: 1,\n    justifyContent: \"center\",\n    alignItems: \"center\",\n  },\n  cityName: {\n    fontSize: 30,\n    color: \"#fff\",\n    fontWeight: \"500\",\n  },\n  weatherBox: {\n    display: \"flex\",\n    alignItems: \"center\",\n  },\n  day: {\n    width: SCREEN_WIDTH,\n    alignItems: \"center\",\n  },\n  temp: {\n    marginTop: 20,   \n    fontSize: 72,\n    color: \"#fff\",\n  },\n  tempMin: {\n    marginTop: 10,\n    marginBottom: 20,\n    fontSize: 18,\n    color: \"#fff\",\n  },\n  desc: {\n    marginTop: 10,\n    fontSize: 42,\n  },\n  tinyText: {\n    fontSize: 16,\n    color: \"#fff\",\n  }\n})"],"sourceRoot":""}